<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="Chloropleth_f3681a3b-2a84-4123-8510-fdf2e3b77a61.xml">
<entry key="meta category" type="xstring" value="org.knime.js.base.node.viz.generic3.GenericJSViewNodeFactory"/>
<entry key="category" type="xstring" value="Plotly"/>
<entry key="name" type="xstring" value="Chloropleth"/>
<entry key="description" type="xstring" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="id" type="xstring" value="f3681a3b-2a84-4123-8510-fdf2e3b77a61"/>
<config key="settings">
<entry key="hideInWizard" type="xboolean" value="false"/>
<entry key="generateView" type="xboolean" value="false"/>
<entry key="maxRows" type="xint" value="1000000"/>
<entry key="jsCode" type="xstring" value="%%00010//import Plotly library%%00010const Plotly = arguments[0];%%00010%%00010//Access the Knime Data Table provided by the node%%00010const dataTableRows = knimeDataTable.getRows();%%00010%%00010//Data Containers for Plotly Data%%00010let countryArray = [],%%00010    aggregateTotals = [],%%00010    numberSample = [],%%00010    edLevelNames = [];%%00010%%00010//User defined settings%%00010let countryColInd = 2, //String, country name%%00010    zColInd = 1,    //Numeric, aggregation column%%00010    educationColInd = 0;    //String, categorical description%%00010%%00010//Create the plotly HTML element %%00010let div = document.createElement('DIV');%%00010div.setAttribute('id', 'knime-choropleth');%%00010document.body.append(div);%%00010%%00010//Data preparation, step 1%%00010dataTableRows.forEach((row, rowInd) =&gt; {%%00010    let countryIndex = countryArray.indexOf(row.data[countryColInd]);%%00010    if (countryIndex &gt; -1) {%%00010        aggregateTotals[countryIndex] += row.data[zColInd];%%00010        numberSample[countryIndex] += 1;%%00010    } else {%%00010        countryArray.push(row.data[countryColInd]);%%00010        aggregateTotals.push(row.data[zColInd]);%%00010        edLevelNames.push(row.data[educationColInd]);%%00010        numberSample.push(1);%%00010    }%%00010});%%00010%%00010//Data preparation, step 2%%00010let averageEducation = aggregateTotals.map((val, ind) =&gt; {%%00010    return val / numberSample[ind];%%00010})%%00010%%00010//Plotly data object%%00010const knimeChoropleth = {%%00010    locations: countryArray,%%00010    z: averageEducation,%%00010    mode: 'markers',%%00010    type: 'choropleth',%%00010    locationmode: 'country names',%%00010    autocolorscale: true%%00010}%%00010%%00010//Plotly layout object%%00010const choroplethLayout = {%%00010    title: 'Adult Dataset with KNIME',%%00010    geo: {%%00010        projection: 'robinson'%%00010    }%%00010}%%00010%%00010//Draw plot%%00010Plotly.newPlot('knime-choropleth', [knimeChoropleth], choroplethLayout);"/>
<entry key="jsSVGCode" type="xstring" value=""/>
<entry key="cssCode" type="xstring" value="body {%%00010    font-family: sans-serif;%%00010}%%00010h1 {%%00010    font-size: 1.5em;%%00010    font-weight: bold;%%00010}%%00010.success {%%00010    color: #006633;%%00010    font-weight: bold;%%00010}%%00010%%00010.failure {%%00010    color: #990000;%%00010    font-weight: bold;%%00010}%%00010#knime-choropleth {%%00010%%00009width: 100%;%%00010%%00009height: 100vh;%%00010}"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="plotly.js-1.47.4"/>
</config>
<entry key="waitTime" type="xint" value="0"/>
<config key="outputVariables">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="customCSS" type="xstring" isnull="true" value=""/>
</config>
</config>
